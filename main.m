clc
clear
close all

sampling_rate = 16000;

% Generate bark scale domain frequency bands
b = hertz_to_bark_scale([100, 8000]);
bark_vector = linspace(b(1), b(2), 17);
hertz_vector = bark_scale_to_hertz(bark_vector);

frequency_bands = cell(16, 1);
for num = 1 : length(hertz_vector)-1 
    band = [hertz_vector(num) hertz_vector(num+1)];
    frequency_bands{num} = band;
end

% Generate corresponding bandpass filters
[filters] = generate_bandpass_filters(frequency_bands, sampling_rate, 6);

% Read all the sound files in directory
sound_files = dir('original_sounds/*.wav');
for index=1:length(sound_files)
    audio_file = fullfile(sound_files(index).folder, sound_files(index).name);
    resampled_audio = read_and_resample(audio_file);
    [~, name, ext] = fileparts(audio_file);
    
    % Create channels for sound by filtering (use filtfilt to get minimum
    % phase digital filtering)
    filtered_channels = cell(length(filters), 1);
    for filter_num = 1 : length(filters)
        current_filter = filters{filter_num, 1};
        sos = current_filter{1, 1};
        gain = current_filter{1, 2};
        filtered_sound = filtfilt(sos, gain, resampled_audio);
        filtered_channels{filter_num, 1} = filtered_sound;
    end
    
    % Plot output signals of lowest and higher frequency channels
    [num_samples, ~] = size(resampled_audio);
    samples_vector = 1:num_samples;
    
    % Plot lowest frequency channel output
    lowest_channel = filtered_channels{1, 1};
    plot(samples_vector, lowest_channel)
    xlabel("Sample Number");
    ylabel("Amplitude");
    title("Lowest Frequency Channel Output")
    
    freq_output_dir = "frequency_channel_outputs";
    if ~exist(freq_output_dir, 'dir')
        mkdir(freq_output_dir)
    end
    
    low_freq_output = "frequency_channel_outputs/low_" + name + ".fig";
    savefig(low_freq_output)

    % Plot highest frequency channel output
    highest_channel = filtered_channels{16, 1};
    plot(samples_vector, highest_channel)
    xlabel("Sample Number");
    ylabel("Amplitude");
    title("Highest Frequency Channel Output")
    
    high_freq_output = "frequency_channel_outputs/high_" + name + ".fig";
    savefig(high_freq_output)
    
    % Get envelope of each frequency channel output
    envelopes = cell(length(filtered_channels), 1);
    for channel_num = 1:length(filtered_channels)
        % Rectify all signals
        rectified_signal = abs(filtered_channels{channel_num, 1});

        % Low-pass filter the signals
        [zeros, poles, gain] = butter(6, 400/(sampling_rate/2));
        [sos, gain] = zp2sos(zeros, poles, gain);
        envelope = filtfilt(sos, gain, rectified_signal);
        envelopes{channel_num, 1} = envelope;
    end

    % Plot envelopes of lowest and higher frequency channel outputs

    % Plot lowest frequency channel envelope
    lowest_channel_envelope = envelopes{1, 1};
    plot(samples_vector, lowest_channel_envelope)
    xlabel("Sample Number");
    ylabel("Amplitude");
    title("Lowest Frequency Channel Envelope")
    
    envelope_dir = "frequency_channel_envelopes";
    if ~exist(envelope_dir, 'dir')
        mkdir(envelope_dir)
    end
    
    low_freq_envelope = "frequency_channel_envelopes/low_" + name + ".fig";
    savefig(low_freq_envelope)

    % Plot highest frequency channel envelope
    highest_channel_envelope = envelopes{16, 1};
    plot(samples_vector, highest_channel_envelope)
    xlabel("Sample Number");
    ylabel("Amplitude");
    title("Highest Frequency Channel Envelope")
    
    high_freq_envelope = "frequency_channel_envelopes/high_" + name + ".fig";
    savefig(high_freq_envelope)
    
end

%     % Generate cosine signal with 1kHz oscillations and same time duration
%     % as original audio
%     fs = 16000; % Sampling frequency (samples per second) 
%     F = 1000; % Cosine wave frequency (hertz) 
%     
%     dt = 1/fs;
%     
%     % Original time of audio in seconds
%     time_duration = size(audio_resampled,1)/fs;
%     tt = 0:dt:time_duration;
%     
%     cos_signal_sound = cos(2*pi*F*tt);
%     
%     % Play sound generated by cosine signal
%     sound(cos_signal_sound, fs)
%     pause(time_duration)
%     
%     % Plot two cycles of cosine sound signal waveform w.r.t time
%     T = 2/F;
%     
%     tt_plot = 0:dt:T;
%     cos_signal_plot = cos(2*pi*F*tt_plot);
%         
%     plot(tt_plot,cos_signal_plot);
%     xlabel("Time")
%     ylabel("Amplitude");
%     
%     cosine_waveform = "waveforms/cosine_" + name + ".fig";
%     savefig(cosine_waveform)

